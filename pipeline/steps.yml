jobs:
- job: OpenEmbedded_Build_And_Export
  container: smartracks-build
  timeoutInMinutes: 3600
  workspace:
     clean: all
  pool:
    name: Drivers-NIBuildFarm-RFMIBUILD
    demands:
      - docker
      - Agent.OS -equals Linux
      
  steps:
  - checkout: rcu-service
  - checkout: meta-smartracks
  - checkout: smartracks-manifest
  - script: |
      cd $(Build.SourcesDirectory)/smartracks-manifest
      git branch
      git checkout -b main
      repo init -u $(Build.SourcesDirectory)/smartracks-manifest -b main -m smartracks-manifest.xml
      
      mkdir .repo/local_manifests
      cat > .repo/local_manifests/remove-meta-smartracks.xml <<EOF
      <?xml version="1.0" encoding="UTF-8"?>
      <manifest>
        <remove-project name="meta-smartracks.git" />
      </manifest>
      EOF
      
      #git clean -ffdx
      #git reset --hard HEAD
      repo sync --force-sync
      cp  -r $(Build.SourcesDirectory)/meta-smartracks $(Build.SourcesDirectory)/smartracks-manifest/layers
      cp  $(Build.SourcesDirectory)/meta-smartracks/buildconf/export $(Build.SourcesDirectory)/smartracks-manifest
      sed -i 's|S = "${WORKDIR}/git"|#S = "${WORKDIR}/git"|g' $(Build.SourcesDirectory)/smartracks-manifest/layers/meta-smartracks/recipes-core/rcu-service/rcu-service_*.bb
      #sed -i 's|S = "${WORKDIR}/git"|#S = "${WORKDIR}/git"|g' $(Build.SourcesDirectory)/smartracks-manifest/layers/meta-smartracks/recipes-core/rcu-service/rcu-service_1.0.bb
      . export
      echo "INHERIT += \"externalsrc\"" >> $(Build.SourcesDirectory)/smartracks-manifest/build/conf/local.conf
      echo "EXTERNALSRC_pn-rcu-service = \"$(Build.SourcesDirectory)/rcu-service\"" >> $(Build.SourcesDirectory)/smartracks-manifest/build/conf/local.conf
      #bitbake rcu-service 
      bitbake smartracks-minimal-image
      bitbake package-index
      
       #--- Create export directories ---
      cd $(Build.SourcesDirectory)/smartracks-manifest/build
      mkdir $(Build.BuildNumber)

      cd $(Build.SourcesDirectory)/smartracks-manifest/build/deploy/images/apalis-imx8x-smartracks
      mkdir image
      cp $(find . -name 'Apalis-iMX8X-SmartRacks_Reference-Minimal-Image-rt-Tezi_*.tar') image
      cp -R image $(Build.SourcesDirectory)/smartracks-manifest/build/$(Build.BuildNumber)
      
      #--- Go back to deploy directory amd create feedversion.txt in feed to clarify feed version ---
      cd $(Build.SourcesDirectory)/smartracks-manifest/build/deploy
      mkdir feed
      echo $(Build.BuildNumber) > feed/feedversion.txt
      
      #--- Copy all files in deploy/ipk to feed, then copy feed to the $(Build.BuildNumber)---
      cp -R ipk/* feed
      cp -R feed $(Build.SourcesDirectory)/smartracks-manifest/build/$(Build.BuildNumber)
      
      #--- Copy all files sdk to the $(Build.BuildNumber)---
      bitbake smartracks-minimal-image -c populate_sdk
      cd $(Build.SourcesDirectory)/smartracks-manifest/build/deploy/
      cp -R sdk $(Build.SourcesDirectory)/smartracks-manifest/build/$(Build.BuildNumber)

      #--- Export to NI-Server---
      cp -R $(Build.SourcesDirectory)/smartracks-manifest/build/$(Build.BuildNumber) /mnt/nirvana/perforceExports/smartracks/rcuimage/1.0/
